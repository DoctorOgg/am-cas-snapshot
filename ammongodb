#!/usr/bin/env perl

# Invoked by AMANDA backup plugin as :
#   Spawning "/usr/libexec/amanda/application/ammongodb ammongodb POST-DLE-BACKUP --execute-where client --config DailyBackup --host example.domain.net --disk /var/mongo/dump --device /var/mongo/dump --level 0 --port 27018 --auth /var/mongo/auth/mongo_backup_auth.cfg --log /var/log/mongo/mongo-amanda.log"

use Getopt::Long;
use File::Path;
$|=1;
#my $dump = "mongo-backup-dump";
my $vgPath = "/dev/vgdb";
my $snapshotVolume = "mongosnap";
my $snapMount = "/var/snapshot";

GetOptions ("execute-where=s" => \$where,
                        "config=s" => \$config,
                        "host=s"   => \$host,
                        "disk=s"   => \$disk,
                        "device=s" => \$device,
                        "level=i"  => \$level,
                        "auth=s"   => \$authFile,
                        "log=s"    => \$logFile,
                        "volume=s" => \$volume,
                        "port=i"   => \$port,
                        "method=s" => \$method,
                        "database=s" => \$database) || die "Incorrect options passed to script\n";
use POSIX qw/strftime/;
my $dateString = strftime "%d/%m/%Y %H:%M:%S", localtime;
open(LOG,">>$logFile") || die "Cannot open log file $logFile for writing\n";
select LOG;
$dle = $ARGV[0];
(my $vgName,$logicalVol) = ($volume =~ m#/dev/([^/]+)/([^/]+)# );
my $vgPath = "/dev/".$vgName;

sub pre_backup {
	my $method = $_[0];
	print "$dateString === Mongo backup started ===\n";

	if ($method eq "snapshot") {
		$snapshotCheck = "sudo /sbin/lvdisplay $vgPath/$snapshotVolume 2>/dev/null";
		my $output = `$snapshotCheck`;
		if ( $output =~ /LV Status\s+available/) {
#			print STDERR "Snapshot $snapshotVolume already exists\n";
			$destroySnapshot = "sudo /bin/umount $snapMount 2>/dev/null ; sudo /sbin/lvremove -f $vgPath/$snapshotVolume";
			my $output = `$destroySnapshot`;
#			print STDERR "Outcome of snapshot destruction:\n$output\n";
		}
		$prebackupCmd = "sudo /sbin/lvcreate -l 100 -s -n $snapshotVolume $vgPath/lvol1 && sudo /bin/mount $vgPath/$snapshotVolume $snapMount"	
	} else {
		open(CFG,"<$authFile") || print "Cannot open config file $authFile\n";
		while(<CFG>) {
			if (/^(USER|PASSWD)=(.+)$/) {
				$$1 = $2;
			}
		}
		close CFG;
		if ( $port == "27018" ) {
			$opLog = "--oplog";
		}
		$prebackupCmd = "/usr/bin/mongodump --host $host:$port -u $USER -p $PASSWD $database $opLog -o $disk/$dump 2>&1";
	}
#	print STDERR "Executing pre-backup Command:\n$prebackupCmd\n";
	open (CMD,"$prebackupCmd|") || die "Cannot execute command:\n $prebackupCmd\n";
	while (<CMD>) {
		print;
	}
	close CMD;
	if ( $? != 0 ){
		exit 1;
	}
}

sub post_backup {
	my $method = $_[0];
	print "$dateString === Mongo backup cleanup ===\n";

	if ($method eq "snapshot") {
		$postbackupCmd = "sudo /bin/umount $snapMount && sudo /sbin/lvremove -f $vgPath/$snapshotVolume";
#		print STDERR "Executing post-backup command:\n$postbackupCmd\n";
		open (CMD,"$postbackupCmd|") || die "Cannot execute command:\n $postbackupCmd\n";
		while (<CMD>) {
			print;
		}
		close CMD;
		if ( $? != 0 ){
			exit 1;
		}
	} else {
		if ( -d "$disk/$dump") {
			print "Deleting directory $disk/$dump\n";
			rmtree "$disk/$dump" || warn "Could not delete $disk/$dump";
		} else {
			print "Directory $disk/$dump does not exist\n";
		}
	}
}

if ( $dle eq "PRE-DLE-BACKUP") {
	pre_backup($method)
} elsif ( $dle eq "POST-DLE-BACKUP") {
	post_backup($method)
} else {
	die "No DLE-BACKUP parameter set; exiting\n";
}

close LOG;

